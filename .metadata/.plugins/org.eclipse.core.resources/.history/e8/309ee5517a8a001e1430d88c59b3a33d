package com.kh.springdb.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.kh.springdb.model.User;
import com.kh.springdb.service.UserService;

@Controller
public class UserController {

	@Autowired
	private UserService userService;
	
	// 전체 아이디 조회를 위해 GetMapping 사용
	@GetMapping("/users-information")
	public String getAllUsers(Model model) {
		List<User> users = userService.getAllUsers();
		model.addAttribute("users", users);
		return "users-information";
	}
	
	
	// 한개 아이디 가져오기
	@GetMapping("/user-information/{id}")
	public String getUserById(@PathVariable int id, Model model) {
		User user = userService.getUserById(id);
		model.addAttribute("user", user);
		return "user-information";
	}

	@GetMapping("/register")
	public String addUser(Model model) {
		model.addAttribute("user", new User());
		return "register";
	}
	
	// 회원 추가
	@PostMapping("/api/user/register")
	public String registerUser(@ModelAttribute("user") @Validated User user, BindingResult result) {
		userService.registerUser(user);
		return "redirect:/registersuccess";	// 회원가입을 성공한 경우 이동하는 경로
	}
	
}

/*
@PathVariable : 경로에 대한 변수를 메서드의 매개변수로 받을 때 사용
사용법 : @PathVariable int id

@ModelAttribute("값")
타임리프 뷰에서 설정한 값의 이름을 사용해서 모델 속성에 접근 가능
@ModelAttribute("user") : user라는 이름으로 Model에 User 객체를 추가

@Validated : 데이터 유효성 검사를 실시하도록 행하는 것
@Validated(user) : User 객체에 대한 데이터 유효성 검사를 실시하겠다 한 것

BindingResult : @Validated 실시한 유효성 검사 결과를 저장하는 객체
				유효성 검사에서 발생한 오류에대한 정보가 담기는 공간
*/