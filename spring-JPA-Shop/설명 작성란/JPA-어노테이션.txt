Annotation
// 사전적 의미 : 주석
// JDK5부터 등장하였으며, 메타데이터라고 불림
// 클래스나 메서드, 변수 등을 선언할 때 사용

JPA
// 자바에서 관계형 데이터베이스와 상호작용을 위해 기능을 따로 작성하지 않고 축소시켜서 사용하는 기술
// 장점 1. 쿼리문 작성이 필요없어 특정 데이터베이스에 종속되지 않음
// 장점 2. 객제지향 프로그래밍
// 장점 3. 생산성 향상
// 단점 1. 복잡한 쿼리 처리하기 어려움
// 단점 2. 학습 시간이 오래 걸림

ORM
// 자바와 데이터베이스에 있는 테이블과 변수들을 매핑해주는 역할

Lombok
// 반복적으로 사용하는 Getter/Setter, ToString과 같은 자바 코드를 대신 생성해주는 역할을 하는 라이브러리
// @Getter/@Setter
// @NotNull : 해당 변수가 null인지 체크
// @EqualsAndHashCode : 객체가 동등한지 비교하는데 사용. 자동으로 equals()와 hashcode() 메서드를 생성
// @RequiredArgsConstructor : 필드 중에 final이나 @NonNull로 선언된 필드를 대상으로 생성자를 생성. 이 생성자는 필드를 초기화하는 목적으로 사용
// @Data : @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor를 합친 어노테이션

@Entity
// 데이터베이스의 테이블에 대응하는 클래스
// @Entity가 붙은 클래스는 JPA에서 관리
// 데이터베이스에 item 테이블을 만들고, 이에 대응되는 Item.java를 생성